extends ../layout

block content
  .row
    .col.s12.js
      form.box(method='post' action enctype='multipart/form-data')
        .box__input
          svg.box__icon(xmlns='http://www.w3.org/2000/svg' width='50' height='43' viewBox='0 0 50 43')
            path(d='M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z')
          input.box__file#file(type='file' name='file' accept='.csv')
          label.box__file__label(for='file')
            strong CSV File을 선택하세요. 
            span.box__dragndrop 또는 여기로 Drag 하세요
            | .

        .box__uploading Uploading…
        .box__success Done!
        .box__error
          | Error! 
          span
          | .

  .row.mt-2
    .col.s12
      .meta-config-wrap
        .row
          .input-field.col.s6.l2
            select#delimiter
              each delimiter in [{name: "Auto Detection", value:""}, {name: "Comma(,)", value:","}, {name: "Semi-colon(;)", value: ";"}, {name: "Colon(:)", value: ":"}, {name: "Tab(\\t)", value: "\\t"}]
                option(value=delimiter.value) #{delimiter.name}
            label(for='delimiter') 구분자
          .input-field.col.s6.l2
            select#encoding
              each encoding in [{name: "UTF-8", value:"UTF-8"}, {name: "EUC-KR", value: "EUC-KR"}, {name: "CP949", value: "cp949"}]
                option(value=encoding.value) #{encoding.name}
            label(for='encoding') 인코딩
          .input-field.col.s6.l2
            select#header-lang
              each lang in [{name: "한국어", value:"ko"}, {name: "영어", value: "en"}]
                option(value=lang.value) #{lang.name}
            label(for='header-lang') 언어
          .input-field.col.s3.l2
            p
              label
                input#has-header.filled-in(type='checkbox' checked)
                span Header포함
          .input-field.col.s3.l2
            button#extract-btn.btn.waves-effect.waves-light(type='button')
              | 메타추출
    .col.s12
      .csv-cols-wrap
        

block scripts
  script(src='https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js')
  script(src='/javascripts/app/handlebars-helper.js')
  script(src='/javascripts/ext/papa-parser/papaparse.min.js')
  script(src='/javascripts/ext/momentjs/moment-with-locales.min.js')
  script.
    $(function() {
      var metaFormTemplate;
      var colTypeOrders = ["string", "number", "date", "boolean"];

      $("select").formSelect();

      $.get("/javascripts/templates/data/metaForm.hbs", function(t) {
        metaFormTemplate = Handlebars.compile(t);
      });

      function renderMetaForm(csvResults) {
        var lang = $("#header-lang").val();
        var headers = csvResults.meta.fields;
        if (!headers) {
          headers = new Array(Object.keys(csvResults.data[0]).length);
        }

        var cols = [];
        for (var header of headers) {
          var colObj = {
            maxLen: 0,
            name: header,
          };

          if (lang == "ko") {
            colObj.koName = header;
          } else {
            colObj.enName = header;
          }

          cols.push(colObj);
        }

        for (var rowItem of csvResults.data) {
          for (var col of cols) {
            var value = rowItem[col.name];
            col.type = findType(value);
            if (col.type == "number") {
              col.maxLen = Math.max(10, ("" + value).length + 5);  
            } else if (col.type == "string") {
              col.maxLen = Math.max(50, ("" + value).length + 25);
            } else {
              col.maxLen = Math.max(col.maxLen, ("" + value).length);
            }
          }
        }

        var metaFormHtml = metaFormTemplate(cols);
        
        $(".csv-cols-wrap").html(metaFormHtml);
        $(".meta-form-select").formSelect({
          classes: "meta-form-select"
        });
        $('.tooltipped').tooltip();
      }

      var targetFiels;
      $("#extract-btn").click(function(e) {
        var f = targetFiels[0];
        var csvConfig = {
          delimiter: $("#delimiter").val(),
          header: $("#has-header").is(":checked"),
          encoding: $("#encoding").val(),
          preview: 10,
          complete: function(results, file) {
            renderMetaForm(results);
          }
        }

        Papa.parse(f, csvConfig);
      });

      function findType(value) {
        if (!Number.isNaN(value) && !Number.isNaN(Number(value))) {
          return "number";
        }

        if (moment(value).isValid()) {
          return "date";
        }

        return "string";
      }

      function fixColType(before, after) {
        if (!before) {
          return after;
        }
        
        if (!after) {
          return before;
        }

        if (colTypeOrders.indexOf(before) < colTypeOrders.indexOf(after)) {
          return before;
        }

        return after
      }

      $(document).on("click", "#save-meta-btn", function() {
        var formData = new FormData();
        formData.append('file', targetFiels[0]);

        var parseOption = {
          delimiter: $("#delimiter").val(),
          header: $("#has-header").is(":checked"),
          encoding: $("#encoding").val()
        };
        formData.append('parseOption', JSON.stringify(parseOption));

        var meta = [];
        $(".meta-form-row").each(function(idx, row) {
          meta.push({
            name: $(row).find(".name").val() || "col" + (idx + 1),
            koName: $(row).find(".ko-name").val(),
            dataType: $(row).find(".data-type").val(),
            maxLength: $(row).find(".max-length").val(),
            floatLength: $(row).find(".float-length").val(),
            dateFormat: $(row).find(".date-format").val(),
            trueValue: $(row).find(".true-value").val(),
            isNotNull: $(row).find(".is-not-null").is(":checked"),
            isUnique: $(row).find(".is-unique").is(":checked"),
            isIndex: $(row).find(".is-index").is(":checked")
          });
        });
        console.log(meta);
        formData.append('meta', JSON.stringify(meta));
        
        for (var pair of formData.entries()) {
          console.log(pair[0]+ ', ' + pair[1]); 
        }

        $(".loading").addClass("active");
  
        $.ajax({
          url: '/datas',
          data: formData,
          type: 'POST',
          contentType: false,
          processData: false,
          success: function(d) {
            $(".loading").removeClass("active");
            // location.href = "/projects/" + d.id;
          }, error: function(err) {
            $(".loading").removeClass("active");
            console.error(err);
          }
        })
      });

      var isAdvancedUpload = function() {
        var div = document.createElement( 'div' );
        return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) ) && 'FormData' in window && 'FileReader' in window;
        }();

      // applying the effect for every form
      var forms = document.querySelectorAll( '.box' );
      Array.prototype.forEach.call( forms, function( form )
      {
        var input		 = form.querySelector( 'input[type="file"]' ),
          label		 = form.querySelector( 'label' ),
          errorMsg	 = form.querySelector( '.box__error span' ),
          restart		 = form.querySelectorAll( '.box__restart' ),
          droppedFiles = false,
          showFiles	 = function( files ) {
            label.textContent = files.length > 1 ? ( input.getAttribute( 'data-multiple-caption' ) || '' ).replace( '{count}', files.length ) : files[ 0 ].name;
            targetFiels = files;
          }, triggerFormSubmit = function() {
            var event = document.createEvent( 'HTMLEvents' );
            event.initEvent( 'submit', true, false );
            form.dispatchEvent( event );
          };

        // letting the server side to know we are going to make an Ajax request
        var ajaxFlag = document.createElement( 'input' );
        ajaxFlag.setAttribute( 'type', 'hidden' );
        ajaxFlag.setAttribute( 'name', 'ajax' );
        ajaxFlag.setAttribute( 'value', 1 );
        form.appendChild( ajaxFlag );

        // automatically submit the form on file select
        input.addEventListener( 'change', function( e ) {
          showFiles( e.target.files );
        });

        // drag&drop files if the feature is available
        if( isAdvancedUpload ) {
          form.classList.add( 'has-advanced-upload' ); // letting the CSS part to know drag&drop is supported by the browser

          [ 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop' ].forEach( function( event ) {
            form.addEventListener( event, function( e ) {
              // preventing the unwanted behaviours
              e.preventDefault();
              e.stopPropagation();
            });
          });
          [ 'dragover', 'dragenter' ].forEach( function( event ) {
            form.addEventListener( event, function()
            {
              form.classList.add( 'is-dragover' );
            });
          });
          [ 'dragleave', 'dragend', 'drop' ].forEach( function( event ) {
            form.addEventListener( event, function()
            {
              form.classList.remove( 'is-dragover' );
            });
          });
          form.addEventListener( 'drop', function( e ) {
            droppedFiles = e.dataTransfer.files; // the files that were dropped
            var re = /(\.csv)$/i;
            if (!re.exec(droppedFiles[0].name)) {
              alert("CSV 파일만 등록 가능합니다.");
            }

            showFiles( droppedFiles );
          });
        }


        // if the form was submitted
        form.addEventListener( 'submit', function( e ) {
          // preventing the duplicate submissions if the current one is in progress
          if( form.classList.contains( 'is-uploading' ) ) return false;

          form.classList.add( 'is-uploading' );
          form.classList.remove( 'is-error' );

          if( isAdvancedUpload ) // ajax file upload for modern browsers
          {
            e.preventDefault();

            // gathering the form data
            var ajaxData = new FormData( form );
            if( droppedFiles )
            {
              Array.prototype.forEach.call( droppedFiles, function( file )
              {
                ajaxData.append( input.getAttribute( 'name' ), file );
              });
            }

            // ajax request
            var ajax = new XMLHttpRequest();
            ajax.open( form.getAttribute( 'method' ), form.getAttribute( 'action' ), true );

            ajax.onload = function()
            {
              form.classList.remove( 'is-uploading' );
              if( ajax.status >= 200 && ajax.status < 400 )
              {
                var data = JSON.parse( ajax.responseText );
                form.classList.add( data.success == true ? 'is-success' : 'is-error' );
                if( !data.success ) errorMsg.textContent = data.error;
              }
              else alert( 'Error. Please, contact the webmaster!' );
            };

            ajax.onerror = function()
            {
              form.classList.remove( 'is-uploading' );
              alert( 'Error. Please, try again!' );
            };

            ajax.send( ajaxData );
          }
          else // fallback Ajax solution upload for older browsers
          {
            var iframeName	= 'uploadiframe' + new Date().getTime(),
              iframe		= document.createElement( 'iframe' );

              $iframe		= $( '<iframe name="' + iframeName + '" style="display: none;"></iframe>' );

            iframe.setAttribute( 'name', iframeName );
            iframe.style.display = 'none';

            document.body.appendChild( iframe );
            form.setAttribute( 'target', iframeName );

            iframe.addEventListener( 'load', function()
            {
              var data = JSON.parse( iframe.contentDocument.body.innerHTML );
              form.classList.remove( 'is-uploading' )
              form.classList.add( data.success == true ? 'is-success' : 'is-error' )
              form.removeAttribute( 'target' );
              if( !data.success ) errorMsg.textContent = data.error;
              iframe.parentNode.removeChild( iframe );
            });
          }
        });


        // restart the form if has a state of error/success
        Array.prototype.forEach.call( restart, function( entry )
        {
          entry.addEventListener( 'click', function( e )
          {
            e.preventDefault();
            form.classList.remove( 'is-error', 'is-success' );
            input.click();
          });
        });

        // Firefox focus bug fix for file input
        input.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });
        input.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });
      });
    })          