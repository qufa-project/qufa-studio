extends ../layout

block content
  include _task_tabs

  include _option_btns
  include _visual_modal
  include _importance_modal
  include _compare_modal
  include _fairness_compare_modal
  include _profile_modal

block scripts
  script(src='https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js')
  script(src='/javascripts/app/handlebars-helper.js')
  script(src='https://cdn.amcharts.com/lib/4/core.js')
  script(src='https://cdn.amcharts.com/lib/4/charts.js')
  script(src='https://cdn.amcharts.com/lib/4/plugins/sunburst.js')
  script(src='https://cdn.amcharts.com/lib/4/themes/animated.js')

  script.
    am4core.addLicense("CH204832145");
  script
    | var datasetId = #{dataset.id};
    | var projectId = #{project.id};
    if currentTask
      | var taskId = #{currentTask.id};
      | var task = "#{currentTask.task}";
    include scripts/dataset.js
  script.
    var projectId = #{project.id};
    $(document).ready(function(){
      $(document).on("click", ".visual-btn", function (e) {
        if (taskId) {
          if (task == "imputation") {
            $.getJSON("/datasets/" + datasetId + "/imputation", function(result) {
              if (result && result.result) {
                imputationResult = result.result

                var resultData = [];
                for(var key of Object.keys(imputationResult)) {
                  var obj = {
                    category: key.trim(),
                    //value: imputationResult[key]
                    value: Math.floor(Math.random() * 100)
                  };
                  resultData.push(obj);
                }

                $("#visual-result").html("");
                renderImputationChart("visual-result", resultData);
                
                $("#visual-modal").modal();
                $("#visual-modal").modal("open");
              }
            });
          }
        }
      });

      $(document).on("click", ".compare-data-btn", function() {
        $("#fairness-compare-modal").modal();
        $("#fairness-compare-modal").modal("open");
        
        //- $.getJSON("/datasets/" + datasetId + "/fairness", function(result) {
        //-   console.log(result);
        //-   renderSunburst("before-result", result.before.children);
        //-   renderSunburst("after-result", result.after.children);
        //- });
      });

      $("#check-all").click(function() {
        $(".col-checkbox").prop("checked", $(this).is(":checked"));
      });

      $("#btn-fairness-viz").click(function() {
        var checkedCols = [];
        $(".col-checkbox:checked").each(function(idx, cBox) {
          checkedCols.push($(cBox).val());
        });

        if (checkedCols.length) {
          $.ajax({
            url: "/datasets/" + datasetId + "/fairness",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({checkedCols: checkedCols}),
            success: function(d) {
              console.log(d);
              if (d.before && d.after) {
                var beforeG = _.groupBy(d.before, 'colName');
                var afterG = _.groupBy(d.after, 'colName');
                
                _.forEach(beforeG, function(value, key) {
                  if (value.length < 20) {
                    var graphId = "graph-" + key;
                    var $graphWrap = $("<div/>").addClass("col").addClass("s12").addClass("l4").append($("<div/>").attr("id", graphId).addClass("chart-wrap"));
                    $("#result-graph").append($graphWrap);
                  }
                });

                _.forEach(beforeG, function(value, key) {
                  if (value.length < 20) {
                    var graphId = "graph-" + key;
                    var chartData = [];

                    var beforeObj = {
                      category: "Before " + key
                    };

                    _.forEach(value, function(v) {
                      beforeObj["" + v.colValue] = v.colCount
                    });

                    var afterObj = {
                      category: "After " + key
                    };

                    _.forEach(afterG[key], function(v) {
                      afterObj["" + v.colValue] = v.colCount
                    });

                    chartData.push(beforeObj);
                    chartData.push(afterObj);

                    renderFairnessChart(graphId, chartData);
                  }
                });
              }
            }
          })
        }
      });

      function renderFairnessChart(container, data) {
        am4core.ready(function() {
          // Themes begin
          am4core.useTheme(am4themes_animated);
          // Themes end

          var chart = am4core.create(container, am4charts.XYChart);
          chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

          chart.data = data;
          chart.padding(30, 30, 10, 30);
          // chart.legend = new am4charts.Legend();

          var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
          categoryAxis.dataFields.category = "category";
          categoryAxis.renderer.grid.template.location = 0;

          var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
          valueAxis.min = 0;
          valueAxis.max = 100;
          valueAxis.strictMinMax = true;
          valueAxis.calculateTotals = true;
          valueAxis.renderer.minWidth = 50;

          _.forEach(data[0], function(val, k) {
            if (k != "category") {
              createSeries(val, k);
            }
          });

          function createSeries(value, name) {
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.columns.template.width = am4core.percent(80);
            series.columns.template.tooltipText =
              "{name}: {valueY.totalPercent.formatNumber('#.00')}%";
            series.name = ""+name;
            series.dataFields.categoryX = "category";
            series.dataFields.valueY = name;
            series.dataFields.valueYShow = "totalPercent";
            series.dataItems.template.locations.categoryX = 0.5;
            series.stacked = true;
            series.tooltip.pointerOrientation = "vertical";

            var bullet = series.bullets.push(new am4charts.LabelBullet());
            bullet.interactionsEnabled = false;
            bullet.label.text = "{valueY.totalPercent.formatNumber('#.00')}%";
            bullet.label.fill = am4core.color("#ffffff");
            bullet.locationY = 0.5;
          }
        });
      }

      function renderSunburst(container, data) {
        am4core.useTheme(am4themes_animated);

        var chart = am4core.create(container, am4plugins_sunburst.Sunburst);
        chart.padding(0,0,0,0);
        chart.radius = am4core.percent(98);

        chart.data = data;

        chart.colors.step = 5;
        chart.fontSize = 11;
        chart.innerRadius = am4core.percent(10);

        // define data fields
        chart.dataFields.value = "size";
        chart.dataFields.name = "name";
        chart.dataFields.children = "children";

        var level0SeriesTemplate = new am4plugins_sunburst.SunburstSeries();
        level0SeriesTemplate.hiddenInLegend = false;
        chart.seriesTemplates.setKey("0", level0SeriesTemplate)

        // this makes labels to be hidden if they don't fit
        level0SeriesTemplate.labels.template.truncate = false;
        level0SeriesTemplate.labels.template.hideOversized = false;

        level0SeriesTemplate.labels.template.adapter.add("rotation", function(rotation, target) {
          target.maxWidth = target.dataItem.slice.radius - target.dataItem.slice.innerRadius - 10;
          target.maxHeight = Math.abs(target.dataItem.slice.arc * (target.dataItem.slice.innerRadius + target.dataItem.slice.radius) / 2 * am4core.math.RADIANS);

          return rotation;
        })


        var level1SeriesTemplate = level0SeriesTemplate.clone();
        chart.seriesTemplates.setKey("1", level1SeriesTemplate)
        level1SeriesTemplate.fillOpacity = 0.75;
        level1SeriesTemplate.hiddenInLegend = true;

        var level2SeriesTemplate = level0SeriesTemplate.clone();
        chart.seriesTemplates.setKey("2", level2SeriesTemplate)
        level2SeriesTemplate.fillOpacity = 0.5;
        level2SeriesTemplate.hiddenInLegend = true;
      }

      $(document).on("click", ".compare-btn", function() {
        console.log($(this).data('task'));

        $.getJSON("/datasets/" + datasetId + "/fairnessResult", function(result) {
          var beforeMatrix1 = [];
          beforeMatrix1.push('<div class="tpr-box row">');
          beforeMatrix1.push('<div class="col s12">');
          beforeMatrix1.push('  <div class="col s6 box-item box-tp">');
          beforeMatrix1.push(result.before.tp_a);
          beforeMatrix1.push('  </div>');
          beforeMatrix1.push('  <div class="col s6 box-item box-fn">');
          beforeMatrix1.push(result.before.fn_a);
          beforeMatrix1.push('  </div>');
          beforeMatrix1.push('  <div class="col s6 box-item box-fp">');
          beforeMatrix1.push(result.before.fp_a);
          beforeMatrix1.push('  </div>');
          beforeMatrix1.push('  <div class="col s6 box-item box-tn">');
          beforeMatrix1.push(result.before.tn_a);
          beforeMatrix1.push('  </div>');
          beforeMatrix1.push("</div>");
          beforeMatrix1.push("</div>");

          var afterMatrix1 = [];
          afterMatrix1.push('<div class="tpr-box row">');
          beforeMatrix1.push('<div class="col s12">');
          afterMatrix1.push('  <div class="col s6 box-item box-tp">');
          afterMatrix1.push(result.after.tp_a);
          afterMatrix1.push('  </div>');
          afterMatrix1.push('  <div class="col s6 box-item box-fn">');
          afterMatrix1.push(result.after.fn_a);
          afterMatrix1.push('  </div>');
          afterMatrix1.push('  <div class="col s6 box-item box-fp">');
          afterMatrix1.push(result.after.fp_a);
          afterMatrix1.push('  </div>');
          afterMatrix1.push('  <div class="col s6 box-item box-tn">');
          afterMatrix1.push(result.after.tn_a);
          afterMatrix1.push('  </div>');
          afterMatrix1.push("</div>");  
          afterMatrix1.push("</div>");          

          $("#before-result").html(beforeMatrix1.join(""));
          $("#after-result").html(afterMatrix1.join(""));

          $("#compare-modal").modal();
          $("#compare-modal").modal("open");
        });
      })

      function renderImputationChart(chartId, data) {
        am4core.ready(function() {
          am4core.useTheme(am4themes_animated);

          var chart = am4core.create(chartId, am4charts.XYChart);
          chart.padding(40, 40, 40, 40);
          chart.data = data;

          var colorList = [
            am4core.color("#48DAC5"),
            am4core.color("#00A389"),
            am4core.color("#0F5F52"),
            am4core.color("#13463D"),
            am4core.color("#384948"),
            am4core.color("#38514D"),
            am4core.color("#536B67"),
            am4core.color("#8B9997")
          ];

          var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
          categoryAxis.renderer.grid.template.location = 0;
          categoryAxis.dataFields.category = "category";
          categoryAxis.renderer.minGridDistance = 1;
          categoryAxis.renderer.inversed = true;
          categoryAxis.renderer.grid.template.stroke = "#fff";
          categoryAxis.renderer.grid.template.strokeDasharray = "2,4";

          var label = categoryAxis.renderer.labels.template;
          label.fill = am4core.color("#fff");

          var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
          valueAxis.min = 0;
          valueAxis.renderer.grid.template.stroke = "#fff";
          valueAxis.renderer.grid.template.strokeDasharray = "2,4";

          var vLabel = valueAxis.renderer.labels.template;
          vLabel.fill = am4core.color("#fff");

          var series = chart.series.push(new am4charts.ColumnSeries());
          series.dataFields.categoryY = "category";
          series.dataFields.valueX = "value";
          series.tooltipText = "{valueX.value}"
          series.columns.template.strokeOpacity = 0;
          series.columns.template.column.cornerRadiusBottomRight = 5;
          series.columns.template.column.cornerRadiusTopRight = 5;

          var labelBullet = series.bullets.push(new am4charts.LabelBullet())
          labelBullet.label.horizontalCenter = "left";
          labelBullet.label.dx = 10;
          labelBullet.label.text = "{values.valueX.workingValue.formatNumber('#')} 건";
          labelBullet.locationX = 1;
          labelBullet.fill = am4core.color("#fff");

          // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set
          series.columns.template.adapter.add("fill", function(fill, target){
            //return chart.colors.getIndex(target.dataItem.index);
            return colorList[target.dataItem.index % colorList.length];
          });

          categoryAxis.sortBySeries = series;
        });
      }
    });