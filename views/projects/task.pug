extends ../layout

block content
  include _task_tabs

  include _option_btns
  include _visual_modal
  include _importance_modal
  include _compare_modal
  include _fairness_compare_modal
  include _profile_modal

block scripts
  script(src='https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js')
  script(src='/javascripts/app/handlebars-helper.js')
  script(src='https://cdn.amcharts.com/lib/4/core.js')
  script(src='https://cdn.amcharts.com/lib/4/charts.js')
  script(src='https://cdn.amcharts.com/lib/4/plugins/sunburst.js')
  script(src='https://cdn.amcharts.com/lib/4/themes/animated.js')

  script.
    am4core.addLicense("CH204832145");
  script
    | var datasetId = #{dataset.id};
    | var projectId = #{project.id};
    if currentTask
      | var taskId = #{currentTask.id};
      | var task = "#{currentTask.task}";
    include scripts/dataset.js
  script.
    var projectId = #{project.id};
    $(document).ready(function(){
      $(document).on("click", ".visual-btn", function (e) {
        if (taskId) {
          if (task == "imputation") {
            $.getJSON("/datasets/" + datasetId + "/imputation", function(result) {
              if (result && result.result) {
                imputationResult = result.result

                var resultData = [];
                for(var key of Object.keys(imputationResult)) {
                  var obj = {
                    category: key.trim(),
                    //value: imputationResult[key]
                    value: Math.floor(Math.random() * 100)
                  };
                  resultData.push(obj);
                }

                $("#visual-result").html("");
                renderImputationChart("visual-result", resultData);
                
                $("#visual-modal").modal();
                $("#visual-modal").modal("open");
              }
            });
          }
        }
      });

      $(document).on("click", ".compare-data-btn", function() {
        $("#fairness-compare-modal").modal();
        $("#fairness-compare-modal").modal("open");
      });

      $("#check-all").click(function() {
        $(".col-checkbox").prop("checked", $(this).is(":checked"));
      });

      $("#btn-fairness-viz").click(function() {
        var checkedCols = [];
        $(".col-checkbox:checked").each(function(idx, cBox) {
          checkedCols.push($(cBox).val());
        });

        if (checkedCols.length) {
          $.ajax({
            url: "/datasets/" + datasetId + "/fairness",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({checkedCols: checkedCols}),
            success: function(d) {
              console.log(d);
              if (d.before && d.after) {
                var beforeG = _.groupBy(d.before, 'colName');
                var afterG = _.groupBy(d.after, 'colName');
                
                _.forEach(beforeG, function(value, key) {
                  $("#col-" + key + "-cnt").text("(" + value.length + ")");
                  if (value.length < 20) {
                    var graphId = "graph-" + key;
                    var $graphWrap = $("<div/>").addClass("col").addClass("s12").addClass("l4").append($("<div/>").attr("id", graphId).addClass("chart-wrap"));
                    $("#result-graph").append($graphWrap);
                  } else {
                    $("#col-" + key + "-cnt").css("color", "red");
                  }
                });

                _.forEach(beforeG, function(value, key) {
                  if (value.length < 20) {
                    var graphId = "graph-" + key;
                    var chartData = [];

                    var beforeObj = {
                      category: "Before " + key
                    };

                    _.forEach(value, function(v) {
                      beforeObj["" + v.colValue] = v.colCount
                    });

                    var afterObj = {
                      category: "After " + key
                    };

                    _.forEach(afterG[key], function(v) {
                      afterObj["" + v.colValue] = v.colCount
                    });

                    chartData.push(beforeObj);
                    chartData.push(afterObj);

                    renderFairnessChart(graphId, chartData);
                  }
                });
              }
            }
          })
        }
      });

      function renderFairnessChart(container, data) {
        am4core.ready(function() {
          // Themes begin
          am4core.useTheme(am4themes_animated);
          // Themes end

          var chart = am4core.create(container, am4charts.XYChart);
          chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

          chart.data = data;
          chart.padding(30, 30, 10, 30);
          // chart.legend = new am4charts.Legend();

          var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
          categoryAxis.dataFields.category = "category";
          categoryAxis.renderer.grid.template.location = 0;
          categoryAxis.renderer.grid.template.stroke = am4core.color("#f2f2f2");
          var label = categoryAxis.renderer.labels.template;
          label.fill = am4core.color("#fff");

          var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
          valueAxis.renderer.grid.template.stroke = am4core.color("#f2f2f2");
          valueAxis.min = 0;
          valueAxis.max = 100;
          valueAxis.strictMinMax = true;
          valueAxis.calculateTotals = true;
          valueAxis.renderer.minWidth = 50;

          var labelY = valueAxis.renderer.labels.template;
          labelY.fill = am4core.color("#fff");

          _.forEach(data[0], function(val, k) {
            if (k != "category") {
              createSeries(val, k);
            }
          });

          function createSeries(value, name) {
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.columns.template.width = am4core.percent(80);
            series.columns.template.tooltipText =
              "{name}: {valueY.totalPercent.formatNumber('#.00')}%";
            series.name = ""+name;
            series.dataFields.categoryX = "category";
            series.dataFields.valueY = name;
            series.dataFields.valueYShow = "totalPercent";
            series.dataItems.template.locations.categoryX = 0.5;
            series.stacked = true;
            series.tooltip.pointerOrientation = "vertical";

            var bullet = series.bullets.push(new am4charts.LabelBullet());
            bullet.interactionsEnabled = false;
            bullet.label.text = "{valueY.totalPercent.formatNumber('#.00')}%";
            bullet.label.fill = am4core.color("#ffffff");
            bullet.locationY = 0.5;
          }
        });
      }

      function renderTprChart(container, title, data) {
        am4core.ready(function() {
          // Themes begin
          am4core.useTheme(am4themes_animated);
          // Themes end

          // Create chart
          var chart = am4core.create(container, am4charts.XYChart);
          chart.data = data;
          chart.numberFormatter.numberFormat = "#.##%";
          chart.legend = new am4charts.Legend();
          chart.legend.labels.template.text = "[{color}]{name}";

          // Create axes
          var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
          dateAxis.renderer.minGridDistance = 50;
          dateAxis.renderer.labels.template.disabled = true;
          dateAxis.cursorTooltipEnabled = false;
          dateAxis.renderer.grid.template.stroke = am4core.color("#f2f2f2");

          var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
          valueAxis.renderer.grid.template.stroke = am4core.color("#f2f2f2");
          var label = valueAxis.renderer.labels.template;
          label.fill = am4core.color("#fff");
          
          var colorList = [
            am4core.color("#67b7dc"),
            am4core.color("#00A389"),
            am4core.color("#dc8c67"),
            am4core.color("#dc67ce")                       
          ];

          function createSeries(field, name, colorIdx, isFirst) {
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = field;
            series.calculatePercent = true; 
            series.dataFields.dateX = "date";
            series.strokeWidth = 2;
            series.name = name + " of Subgroup " + colorIdx ;
            series.smoothing = "monotoneX";
            series.stroke = colorList[colorIdx];

            if (isFirst) {
              series.tooltipText = "[bold]Before:[/] {value1}\n[bold]After :[/] {value2}";
              series.tooltip.pointerOrientation = "vertical";
            }

            return series;
          }

          createSeries("value1", title, 1, true);
          createSeries("value2", title, 2);

          // Add cursor
          chart.cursor = new am4charts.XYCursor();
          chart.cursor.xAxis = dateAxis;
          
        });
      }

      $(document).on("click", ".compare-btn", function() {

        $.getJSON("/datasets/" + datasetId + "/fairnessResult", function(result) {

          renderTprChart("equality-result", "TPR", [
            {date: new Date(2015, 0, 1), value1: result.before.tpr_a, value2: result.before.tpr_b},
            {date: new Date(2016, 0, 1),value1: result.after.tpr_a, value2: result.after.tpr_b}
          ]);

          renderTprChart("equalized-result", "FPR", [
            {date: new Date(2015, 0, 1), value1: result.before.fpr_a, value2: result.before.fpr_b},
            {date: new Date(2016, 0, 1),value1: result.after.fpr_a, value2: result.after.fpr_b}
          ]);

          renderTprChart("demographic-result", "DP", [
            {date: new Date(2015, 0, 1), value1: result.before.pcn_a / 100, value2: result.before.pcn_b / 100},
            {date: new Date(2016, 0, 1),value1: result.after.pcn_a / 100, value2: result.after.pcn_b / 100}
          ]);

          $("#compare-modal").modal();
          $("#compare-modal").modal("open");
        });
      })

      function renderImputationChart(chartId, data) {
        am4core.ready(function() {
          am4core.useTheme(am4themes_animated);

          var chart = am4core.create(chartId, am4charts.XYChart);
          chart.padding(40, 40, 40, 40);
          chart.data = data;

          var colorList = [
            am4core.color("#48DAC5"),
            am4core.color("#00A389"),
            am4core.color("#0F5F52"),
            am4core.color("#13463D"),
            am4core.color("#384948"),
            am4core.color("#38514D"),
            am4core.color("#536B67"),
            am4core.color("#8B9997")
          ];

          var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
          categoryAxis.renderer.grid.template.location = 0;
          categoryAxis.dataFields.category = "category";
          categoryAxis.renderer.minGridDistance = 1;
          categoryAxis.renderer.inversed = true;
          categoryAxis.renderer.grid.template.stroke = "#fff";
          categoryAxis.renderer.grid.template.strokeDasharray = "2,4";

          var label = categoryAxis.renderer.labels.template;
          label.fill = am4core.color("#fff");

          var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
          valueAxis.min = 0;
          valueAxis.renderer.grid.template.stroke = "#fff";
          valueAxis.renderer.grid.template.strokeDasharray = "2,4";

          var vLabel = valueAxis.renderer.labels.template;
          vLabel.fill = am4core.color("#fff");

          var series = chart.series.push(new am4charts.ColumnSeries());
          series.dataFields.categoryY = "category";
          series.dataFields.valueX = "value";
          series.tooltipText = "{valueX.value}"
          series.columns.template.strokeOpacity = 0;
          series.columns.template.column.cornerRadiusBottomRight = 5;
          series.columns.template.column.cornerRadiusTopRight = 5;

          var labelBullet = series.bullets.push(new am4charts.LabelBullet())
          labelBullet.label.horizontalCenter = "left";
          labelBullet.label.dx = 10;
          labelBullet.label.text = "{values.valueX.workingValue.formatNumber('#')} 건";
          labelBullet.locationX = 1;
          labelBullet.fill = am4core.color("#fff");

          // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set
          series.columns.template.adapter.add("fill", function(fill, target){
            //return chart.colors.getIndex(target.dataItem.index);
            return colorList[target.dataItem.index % colorList.length];
          });

          categoryAxis.sortBySeries = series;
        });
      }
    });